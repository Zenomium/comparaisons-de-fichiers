#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define INITIAL_CAPACITY 10

typedef struct {
    void *address;   
    size_t size;     
    bool is_free;    
} data_cell;

typedef struct {
    data_cell *cells;   // dynamic array
    size_t count;     
    size_t capacity;       
    unsigned int malloc_calls; 
    unsigned int free_calls;  
    unsigned int free_failures; 
    size_t total_allocated;    
    size_t total_freed;        
} _Environnement;

_Environnement env = {NULL, 0, 0, 0, 0, 0, 0, 0};
bool _end_flag = false;

void _init_environment() {
    env.capacity = INITIAL_CAPACITY;
    env.cells = malloc(env.capacity * sizeof(data_cell));
    if (!env.cells) {
        perror("Failed to initialize environment.\n");
        exit(1);
    }
}

void _show_result() {
    printf("-----------------------\n");
    printf("FINAL REPORT\n");
    printf("Total memory allocated : %zu bytes\n", env.total_allocated);
    printf("Total memory freed     : %zu bytes\n", env.total_freed);
    printf("Ratio                  : %.2f%%\n", env.total_allocated ? 
           ((double)env.total_freed / env.total_allocated) * 100 : 0);
    printf("<malloc>              : %u calls\n", env.malloc_calls);
    printf("<free>                : %u correct call(s)\n", env.free_calls);
    printf("                      : %u incorrect call(s)\n", env.free_failures);
    printf("-----------------------\n");
}

void _ending() {
    _show_result();
    for (size_t i = 0; i < env.count; i++) {
        if (env.cells[i].is_free) {
            free(env.cells[i].address);
        }
    }
    free(env.cells);
}

void _activation(){
    printf("–activate tracker – [VERS.5]–\n");
    printf("–––––––––––––––––\n");
}

void* _my_malloc(char* fich, const char* fonc, int line, size_t size) {
    if (!_end_flag) {
        _activation();
        _end_flag = true; 
        _init_environment();
        atexit(_ending); 
    }

    void *ptr = malloc(size);
    if (ptr) {
        if (env.count >= env.capacity) {
            perror("Environment saturated.\n");
            exit(1);
        }

        env.cells[env.count].address = ptr;
        env.cells[env.count].size = size;
        env.cells[env.count].is_free = true;
        env.total_allocated += size;
        env.malloc_calls++;
        
        printf("in file <%s> function <%s> line <%03d> – (call#%02u) – malloc(%zu)->%p\n",
               fich, fonc, line, env.malloc_calls, size, ptr);
        
        env.count++;
    }
    return ptr;
}

void _my_free(char* fich, const char* fonc, int line, void* ptr) {
    if (!_end_flag) {
        _activation();
        _end_flag = true; 
        _init_environment();
        atexit(_ending); 
    }

    if (ptr == NULL) {
        return;
    }

    for (size_t i = 0; i < env.count; i++) {
        if (env.cells[i].address == ptr) {
            if (!env.cells[i].is_free) {
                printf("in file <%s> function <%s> line <%03d> – (call#%02u) – free(%p) - ERROR: address already freed -> ignored\n",
                       fich, fonc, line, env.free_calls + 1, ptr);
                env.free_failures++;
                return;
            }
            env.cells[i].is_free = false;
            env.total_freed += env.cells[i].size;
            env.free_calls++;
            
            free(ptr);
            printf("in file <%s> function <%s> line <%03d> – (call#%02u) – free(%p)\n",
                   fich, fonc, line, env.free_calls, ptr);
            return;
        }
    }
    printf("in file <%s> function <%s> line <%03d> – (call#%02u) – free(%p) - ERROR: illegal address -> ignored\n",
           fich, fonc, line, env.free_failures + 1, ptr);
    env.free_failures++;
}
